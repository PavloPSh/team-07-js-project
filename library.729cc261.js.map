{"mappings":"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","sources":["src/lib.js","src/js/popup-modal-lib.js","src/js/watched-btn.js","src/js/queue-btn.js"],"sourcesContent":["import './js/loader.js';\nimport './js/form.js';\nimport './js/modal-registration.js';\nimport './js/apiServiсe.js';\n// import './js/scroll.js';\nimport './js/modal-footer.js';\nimport './js/popup-modal-lib';\nimport './js/watched-btn.js';\nimport './js/queue-btn.js';\n","import filmsAPI from './apiServiсe';\nimport { renderMovieModal } from './renderPopupCard';\nconst trendingFilms = new filmsAPI();\nconst filmCard = document.querySelector('.section');\nfilmCard.addEventListener('click', onFilmCardClick);\n\n// const storage refs\nconst STORAGE_WATCHED = 'Watched:';\nconst STORAGE_QUEUE = 'Queque:';\n\nasync function fetchFilmData(filmID) {\n  const response = await trendingFilms.getFilmID(filmID);\n  return response.data;\n}\n\nfunction onFilmCardClick(e) {\n  e.preventDefault();\n  if (\n    e.target.closest('.card__link')?.querySelector('.card__poster') === undefined\n  ) {\n    return;\n  }\n\n  fetchFilmData(e.target.closest('.card__link').id).then(film => {\n    // pop up fetched movie id\n    let parentId = e.target.closest('.card__link').id;\n\n    //this refs should be there to get active parsed arrays\n    const watchedFilmsArray =\n      JSON.parse(localStorage.getItem(STORAGE_WATCHED)) || [];\n    const queueFilmsArray =\n      JSON.parse(localStorage.getItem(STORAGE_QUEUE)) || [];\n\n    // refs for building labels in first popup buttons loading\n    let isInWatchedBefore;\n    let isInQueueBefore;\n\n    // find if movie is in isInWatchedBefore\n    watchedFilmsArray.find(value => {\n      if (value.id == parentId) {\n        return (isInWatchedBefore = true);\n      } else {\n        return (isInWatchedBefore = false);\n      }\n    });\n\n    // find if movie is in isInWatchedBefore\n    queueFilmsArray.find(value => {\n      if (value.id == parentId) {\n        return (isInQueueBefore = true);\n      } else {\n        return (isInQueueBefore = false);\n      }\n    });\n\n    // popup first loading buttons labels\n    let watchBtnLabel = '';\n    let queueBtnLabel = '';\n\n    //build add or delete to watch label\n    if (isInWatchedBefore) {\n      watchBtnLabel = 'Remove from watched';\n    } else {\n      watchBtnLabel = 'Add to watched';\n    }\n\n    //build add or delete to queue label\n    if (isInQueueBefore) {\n      queueBtnLabel = 'Remove from queue';\n    } else {\n      queueBtnLabel = 'Add to queue';\n    }\n\n    // BUTTONS MAIN LOGIC !!!\n    document.addEventListener('click', e => {\n      // logic for button \"add to watch\"\n      if (\n        e.target.classList.contains('watched-button') &&\n        e.target.getAttribute('data-id') === parentId\n      ) {\n        let isInWatched;\n\n        //find if there is popup movie in watchedFilmsArray\n        watchedFilmsArray.find(value => {\n          if (value.id == parentId) {\n            return (isInWatched = true);\n          } else {\n            return (isInWatched = false);\n          }\n        });\n\n        // logic to delete movie if this movie is in watchedFilmsArray\n        if (isInWatched) {\n          const indexWatchMovieRemove = watchedFilmsArray.findIndex(movie => {\n            return movie.id == parentId;\n          });\n          watchedFilmsArray.splice(indexWatchMovieRemove, 1);\n          localStorage.setItem(\n            STORAGE_WATCHED,\n            JSON.stringify(watchedFilmsArray)\n          );\n          isInWatched = false;\n          e.target.innerText = 'Add to watched';\n          console.log('removed from watched ');\n          return;\n        }\n\n        // logic to add movie if this movie is not in watchedFilmsArray\n        else {\n          watchedFilmsArray.push(film);\n          localStorage.setItem(\n            STORAGE_WATCHED,\n            JSON.stringify(watchedFilmsArray)\n          );\n          isInWatched = true;\n          e.target.innerText = 'Remove to watched';\n          console.log('add to watched ');\n          return;\n        }\n      }\n\n      // logic for button \"add to queue\"\n      if (\n        e.target.classList.contains('queque-button') &&\n        e.target.getAttribute('data-id') === parentId\n      ) {\n        let isInQueue;\n\n        //find if there is popup movie in queueFilmsArray\n        queueFilmsArray.find(value => {\n          if (value.id == parentId) {\n            return (isInQueue = true);\n          } else {\n            return (isInQueue = false);\n          }\n        });\n\n        // logic to delete movie if this movie is in queueFilmsArray\n        if (isInQueue) {\n          const indexQueueMovieRemove = queueFilmsArray.findIndex(movie => {\n            return movie.id == parentId;\n          });\n          queueFilmsArray.splice(indexQueueMovieRemove, 1);\n          localStorage.setItem(STORAGE_QUEUE, JSON.stringify(queueFilmsArray));\n          isInQueue = false;\n          e.target.innerText = 'Add to queue';\n          console.log('removed from queue');\n          return;\n        }\n        // logic to add movie if this movie is not in queueFilmsArray\n        else {\n          queueFilmsArray.push(film);\n          localStorage.setItem(STORAGE_QUEUE, JSON.stringify(queueFilmsArray));\n          isInQueue = true;\n          e.target.innerText = 'Remove from queue';\n          console.log('add to queue ');\n          return;\n        }\n      }\n    });\n\n    // popup render\n    const {\n      title,\n      name,\n      poster_path,\n      id,\n      vote_average,\n      vote_count,\n      popularity,\n      overview,\n      genres,\n    } = film;\n    const genre = [];\n    genres.forEach(res => genre.push(res.name));\n    try {\n      setTimeout(() => {\n        renderMovieModal(\n          title,\n          name,\n          poster_path,\n          id,\n          vote_average,\n          vote_count,\n          popularity,\n          overview,\n          genre,\n          watchBtnLabel,\n          queueBtnLabel\n        );\n      }, 100);\n    } catch (error) {\n      console.log('error');\n    }\n  });\n}\n\nconst modalRef = document.querySelector('.modal');\nmodalRef?.addEventListener('click', onModalClose);\ndocument.addEventListener('keydown', onModalClose);\n\nfunction onModalClose(e) {\n  if (\n    e.target.classList.contains('popup') ||\n    e.keyCode === 27 ||\n    e.target.classList.contains('popup-button__close')\n  ) {\n    window.location.reload();\n    modalRef.classList.remove('popup');\n    modalRef.innerHTML = '';\n  }\n  \n}","import Notiflix from 'notiflix';\nimport { renderCard } from './renderCard';\n\nconst watchedBtn = document.querySelector('button[data-action=\"watched\"]');\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst mainSection = document.querySelector('.card__list');\nconst watchedMovies = JSON.parse(localStorage.getItem('Watched:'));\nconst loader = document.querySelector('.loader__wrapper');\nconsole.log(watchedMovies);\n\nwatchedBtn?.addEventListener('click', onWatchBtnClick);\n\nonWatchBtnClick();\n\nfunction onWatchBtnClick() {\n  loader.classList.remove('hidden');\n  watchedBtn.classList.add('current-btn');\n  queueBtn.classList.remove('current-btn');\n\n  if (watchedMovies === null || watchedBtn.length === 0) {\n    mainSection.innerHTML = '';\n    loader.classList.add('hidden');\n    return Notiflix.Notify.failure('You need to add at least 1 movie.');\n  }\n\n  mainSection.innerHTML = '';\n\n  renderWatchedCard();\n  loader.classList.add('hidden');\n}\n\nfunction renderWatchedCard() {\n  const watchedL = watchedMovies.map(film => {\n    const genres = film.genres.map(genre => genre.name);\n    console.log(genres);\n\n    renderCard(\n      film.id,\n      film.poster_path,\n      film.title,\n      film.name,\n      genres,\n      film.first_air_date,\n      film.release_date,\n      film.vote_average\n    );\n  });\n}","import Notiflix from 'notiflix';\nimport { renderCard } from './renderCard';\n\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst watchedBtn = document.querySelector('button[data-action=\"watched\"]');\nconst mainSection = document.querySelector('.card__list');\nconst queueMovies = JSON.parse(localStorage.getItem('Queque:'));\nconst loader = document.querySelector('.loader__wrapper');\nconsole.log(queueMovies);\n\nqueueBtn?.addEventListener('click', onQueueBtnClick);\n\nfunction onQueueBtnClick() {\n  loader.classList.remove('hidden');\n  watchedBtn.classList.remove('current-btn');\n  queueBtn.classList.add('current-btn');\n\n  if (queueMovies === null || queueMovies.length === 0) {\n    mainSection.innerHTML = '';\n    loader.classList.add('hidden');\n    return Notiflix.Notify.failure('You need to add at least 1 movie.');\n  }\n\n  mainSection.innerHTML = '';\n\n  renderQueueCard();\n  loader.classList.add('hidden');\n}\n\nfunction renderQueueCard() {\n  const queueList = queueMovies.map(film => {\n    const genres = film.genres.map(genre => genre.name);\n    console.log(genres);\n\n    renderCard(\n      film.id,\n      film.poster_path,\n      film.title,\n      film.name,\n      genres,\n      film.first_air_date,\n      film.release_date,\n      film.vote_average\n    );\n  });\n}"],"names":["require","parcelHelpers","_renderPopupCard","trendingFilms","default","document","querySelector","addEventListener","e1","ref","preventDefault","undefined","target","closest","filmID","_fetchFilmData","apply","this","arguments","fetchFilmData","id","then","film","isInWatchedBefore","isInQueueBefore","parentId","watchedFilmsArray","JSON","parse","localStorage","getItem","STORAGE_WATCHED","queueFilmsArray","STORAGE_QUEUE","find","value","watchBtnLabel","queueBtnLabel","e","classList","contains","getAttribute","isInWatched","indexWatchMovieRemove","findIndex","movie","splice","setItem","stringify","innerText","console","log","push","isInQueue","indexQueueMovieRemove","title","name","poster_path","vote_average","vote_count","popularity","overview","genres","genre","forEach","res","setTimeout","renderMovieModal","error","_asyncToGeneratorJsDefault","_regeneratorRuntimeDefault","mark","_callee","response","getFilmID","_ctx","sent","data","modalRef","onModalClose","keyCode","window","location","reload","remove","innerHTML","_notiflix","_renderCard","watchedBtn","queueBtn","mainSection","watchedMovies","loader","onWatchBtnClick","add","length","_notiflixDefault","Notify","failure","map","renderCard","first_air_date","release_date","queueMovies"],"version":3,"file":"library.729cc261.js.map"}