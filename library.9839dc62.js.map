{"mappings":"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","sources":["src/lib.js","src/js/popup-modal-lib.js","src/js/queue-btn.js","src/js/watched-btn.js"],"sourcesContent":["import './js/loader.js';\nimport './js/form.js';\nimport './js/modal-registration.js';\nimport './js/apiServiсe.js';\n// import './js/scroll.js';\nimport './js/modal-footer.js';\nimport './js/popup-modal-lib';\nimport './js/watched-btn.js';\nimport './js/queue-btn.js';\nimport './js/auth.js';\n","import FilmsAPI from './apiServiсe';\nimport { renderMovieModal } from './renderPopupCard';\nimport { renderQueueCard } from './queue-btn';\nimport { renderWatchedCard } from './watched-btn';\n\nconst trendingFilms = new FilmsAPI();\nconst filmCard = document.querySelector('.section');\nfilmCard.addEventListener('click', onFilmCardClick);\n\n// const storage refs\nconst STORAGE_WATCHED = 'Watched:';\nconst STORAGE_QUEUE = 'Queque:';\n\nasync function fetchFilmData(filmID) {\n  const response = await trendingFilms.getFilmID(filmID);\n  return response.data;\n}\n\nfunction onFilmCardClick(e) {\n  e.preventDefault();\n  if (\n    e.target.closest('.card__link')?.querySelector('.card__poster') ===\n    undefined\n  ) {\n    return;\n  }\n\n  fetchFilmData(e.target.closest('.card__link').id).then(film => {\n    // pop up fetched movie id\n    let parentId = e.target.closest('.card__link').id;\n\n    //this refs should be there to get active parsed arrays\n    const watchedFilmsArray =\n      JSON.parse(localStorage.getItem(STORAGE_WATCHED)) || [];\n    const queueFilmsArray =\n      JSON.parse(localStorage.getItem(STORAGE_QUEUE)) || [];\n\n    // refs for building labels in first popup buttons loading\n    let isInWatchedBefore;\n    let isInQueueBefore;\n\n    // find if movie is in isInWatchedBefore\n    watchedFilmsArray.find(value => {\n      if (value.id == parentId) {\n        return (isInWatchedBefore = true);\n      } else {\n        return (isInWatchedBefore = false);\n      }\n    });\n\n    // find if movie is in isInWatchedBefore\n    queueFilmsArray.find(value => {\n      if (value.id == parentId) {\n        return (isInQueueBefore = true);\n      } else {\n        return (isInQueueBefore = false);\n      }\n    });\n\n    // popup first loading buttons labels\n    let watchBtnLabel = '';\n    let queueBtnLabel = '';\n\n    //build add or delete to watch label\n    if (isInWatchedBefore) {\n      watchBtnLabel = 'Remove from watched';\n    } else {\n      watchBtnLabel = 'Add to watched';\n    }\n\n    //build add or delete to queue label\n    if (isInQueueBefore) {\n      queueBtnLabel = 'Remove from queue';\n    } else {\n      queueBtnLabel = 'Add to queue';\n    }\n\n    // BUTTONS MAIN LOGIC !!!\n    document.addEventListener('click', e => {\n      // logic for button \"add to watch\"\n      if (\n        e.target.classList.contains('watched-button') &&\n        e.target.getAttribute('data-id') === parentId\n      ) {\n        let isInWatched;\n\n        //find if there is popup movie in watchedFilmsArray\n        watchedFilmsArray.find(value => {\n          if (value.id == parentId) {\n            return (isInWatched = true);\n          } else {\n            return (isInWatched = false);\n          }\n        });\n\n        // logic to delete movie if this movie is in watchedFilmsArray\n        if (isInWatched) {\n          const indexWatchMovieRemove = watchedFilmsArray.findIndex(movie => {\n            return movie.id == parentId;\n          });\n          watchedFilmsArray.splice(indexWatchMovieRemove, 1);\n          localStorage.setItem(\n            STORAGE_WATCHED,\n            JSON.stringify(watchedFilmsArray)\n          );\n          isInWatched = false;\n          e.target.innerText = 'Add to watched';\n          console.log('removed from watched ');\n          return;\n        }\n\n        // logic to add movie if this movie is not in watchedFilmsArray\n        else {\n          watchedFilmsArray.push(film);\n          localStorage.setItem(\n            STORAGE_WATCHED,\n            JSON.stringify(watchedFilmsArray)\n          );\n          isInWatched = true;\n          e.target.innerText = 'Remove to watched';\n          console.log('add to watched ');\n          return;\n        }\n      }\n\n      // logic for button \"add to queue\"\n      if (\n        e.target.classList.contains('queque-button') &&\n        e.target.getAttribute('data-id') === parentId\n      ) {\n        let isInQueue;\n\n        //find if there is popup movie in queueFilmsArray\n        queueFilmsArray.find(value => {\n          if (value.id == parentId) {\n            return (isInQueue = true);\n          } else {\n            return (isInQueue = false);\n          }\n        });\n\n        // logic to delete movie if this movie is in queueFilmsArray\n        if (isInQueue) {\n          const indexQueueMovieRemove = queueFilmsArray.findIndex(movie => {\n            return movie.id == parentId;\n          });\n          queueFilmsArray.splice(indexQueueMovieRemove, 1);\n          localStorage.setItem(STORAGE_QUEUE, JSON.stringify(queueFilmsArray));\n          isInQueue = false;\n          e.target.innerText = 'Add to queue';\n          console.log('removed from queue');\n          return;\n        }\n        // logic to add movie if this movie is not in queueFilmsArray\n        else {\n          queueFilmsArray.push(film);\n          localStorage.setItem(STORAGE_QUEUE, JSON.stringify(queueFilmsArray));\n          isInQueue = true;\n          e.target.innerText = 'Remove from queue';\n          console.log('add to queue ');\n          return;\n        }\n      }\n    });\n\n    // popup render\n    const {\n      title,\n      name,\n      poster_path,\n      id,\n      vote_average,\n      vote_count,\n      popularity,\n      overview,\n      genres,\n    } = film;\n    const genre = [];\n\n    if (genres.length === 0) {\n      genre.push('Unknown');\n    } else {\n      genres.forEach(res => genre.push(res.name));\n    }\n    try {\n      setTimeout(() => {\n        renderMovieModal(\n          title,\n          name,\n          poster_path,\n          id,\n          vote_average,\n          vote_count,\n          popularity,\n          overview,\n          genre,\n          watchBtnLabel,\n          queueBtnLabel\n        );\n      }, 100);\n    } catch (error) {\n      console.log('error');\n    }\n  });\n}\n\nconst modalRef = document.querySelector('.modal');\nmodalRef?.addEventListener('click', onModalClose);\ndocument.addEventListener('keydown', onModalClose);\n\nfunction onModalClose(e) {\n  if (\n    e.target.classList.contains('popup') ||\n    e.keyCode === 27 ||\n    e.target.classList.contains('popup-button__close')\n  ) {\n    renderQueueCard();\n    renderWatchedCard();\n    modalRef.classList.remove('popup');\n    modalRef.innerHTML = '';\n  }\n}\n","import Notiflix from 'notiflix';\nimport { renderCard } from './renderCard';\nimport { onEmptyMoviesStorage } from './watched-btn';\n\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst watchedBtn = document.querySelector('button[data-action=\"watched\"]');\nconst mainSection = document.querySelector('.card__list');\nconst queueMovies = JSON.parse(localStorage.getItem('Queque:'));\nconst clearBtn = document.querySelector('.clear-btn');\nconst loader = document.querySelector('.loader__wrapper');\n\nqueueBtn?.addEventListener('click', onQueueBtnClick);\nclearBtn?.addEventListener('click', onClearBtnClick);\n\nexport function onQueueBtnClick() {\n  loader.classList.remove('hidden');\n  watchedBtn.classList.remove('current-btn');\n  queueBtn.classList.add('current-btn');\n  clearBtn.classList.add('clear-btn--visible');\n  localStorage.setItem('last-active-btn', 'queueButton');\n\n  if (queueMovies === null || queueMovies.length === 0) {\n    clearBtn.classList.remove('clear-btn--visible');\n    clearBtn.classList.add('clear-btn');\n    onEmptyMoviesStorage();\n    loader.classList.add('hidden');\n    return Notiflix.Notify.failure('You need to add at least 1 movie.', {\n      timeout: 1500,\n      clickToClose: true,\n    });\n  }\n\n  mainSection.innerHTML = '';\n\n  renderQueueCard();\n  loader.classList.add('hidden');\n}\n\nexport function renderQueueCard() {\n  const queueList = queueMovies.map(film => {\n    const genres = film.genres.map(genre => genre.name);\n\n    renderCard(\n      film.id,\n      film.poster_path,\n      film.title,\n      film.name,\n      genres,\n      film.first_air_date,\n      film.release_date,\n      film.vote_average\n    );\n  });\n}\n\nfunction onClearBtnClick() {\n  if (queueBtn.classList.contains('current-btn')) {\n    localStorage.removeItem('Queque:');\n    location.reload();\n  }\n}\n","import Notiflix from 'notiflix';\nimport { renderCard } from './renderCard';\nimport { onQueueBtnClick } from './queue-btn';\n\nconst watchedBtn = document.querySelector('button[data-action=\"watched\"]');\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst mainSection = document.querySelector('.card__list');\nconst watchedMovies = JSON.parse(localStorage.getItem('Watched:'));\nconst clearBtn = document.querySelector('.clear-btn');\nconst loader = document.querySelector('.loader__wrapper');\n\nwatchedBtn?.addEventListener('click', onWatchBtnClick);\nclearBtn?.addEventListener('click', onClearBtnClick);\n\nfirstBtnActive();\n\nfunction firstBtnActive() {\n  if (localStorage.getItem('last-active-btn') === 'watchedButton') {\n    return onWatchBtnClick()\n  }\n\n  if (localStorage.getItem('last-active-btn') === 'queueButton') {\n    return onQueueBtnClick()\n  } else {\n    onWatchBtnClick();\n  }\n}\n\nfunction onWatchBtnClick() {\n  loader.classList.remove('hidden');\n  watchedBtn.classList.add('current-btn');\n  queueBtn.classList.remove('current-btn');\n  clearBtn.classList.add('clear-btn--visible');\n  localStorage.setItem('last-active-btn', 'watchedButton');\n\n  if (watchedMovies === null || watchedBtn.length === 0) {\n    clearBtn.classList.remove('clear-btn--visible');\n    clearBtn.classList.add('clear-btn');\n    onEmptyMoviesStorage();\n    loader.classList.add('hidden');\n    return Notiflix.Notify.failure('You need to add at least 1 movie.', {\n      timeout: 1500,\n      clickToClose: true,\n    });\n  }\n\n  mainSection.innerHTML = '';\n\n  renderWatchedCard();\n  loader.classList.add('hidden');\n}\n\nexport function renderWatchedCard() {\n  const watchedL = watchedMovies.map(film => {\n    const genres = film.genres.map(genre => genre.name);\n\n    renderCard(\n      film.id,\n      film.poster_path,\n      film.title,\n      film.name,\n      genres,\n      film.first_air_date,\n      film.release_date,\n      film.vote_average\n    );\n  });\n}\n\nexport function onEmptyMoviesStorage() {\n  const notificationText = `<li class=\"card__notification\">You don't have any movies added</li>`;\n  mainSection.innerHTML = notificationText;\n}\n\nfunction onClearBtnClick() {\n  if (watchedBtn.classList.contains('current-btn')) {\n    localStorage.removeItem('Watched:');\n    location.reload();\n  }\n}\n"],"names":["require","parcelHelpers","_renderPopupCard","_queueBtn","_watchedBtn","trendingFilms","default","document","querySelector","addEventListener","e1","ref","preventDefault","undefined","target","closest","filmID","_fetchFilmData","apply","this","arguments","fetchFilmData","id","then","film","isInWatchedBefore","isInQueueBefore","parentId","watchedFilmsArray","JSON","parse","localStorage","getItem","STORAGE_WATCHED","queueFilmsArray","STORAGE_QUEUE","find","value","watchBtnLabel","queueBtnLabel","e","classList","contains","getAttribute","isInWatched","indexWatchMovieRemove","findIndex","movie","splice","setItem","stringify","innerText","console","log","push","isInQueue","indexQueueMovieRemove","title","name","poster_path","vote_average","vote_count","popularity","overview","genres","genre","length","forEach","res","setTimeout","renderMovieModal","error","_asyncToGeneratorJsDefault","_regeneratorRuntimeDefault","mark","_callee","response","getFilmID","_ctx","sent","data","modalRef","onModalClose","keyCode","renderQueueCard","renderWatchedCard","remove","innerHTML","export","exports","onQueueBtnClick","_notiflix","_renderCard","queueBtn","watchedBtn","mainSection","queueMovies","clearBtn","loader","add","onEmptyMoviesStorage","_notiflixDefault","Notify","failure","timeout","clickToClose","map","renderCard","first_air_date","release_date","removeItem","location","reload","watchedMovies","onWatchBtnClick","firstBtnActive"],"version":3,"file":"library.9839dc62.js.map"}